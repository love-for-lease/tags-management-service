openapi: 3.0.0
info:
  version: '1.0'
  title: tags-management-service
  description: 'Esta API recebe solicitações de inclusão de tags, armazena e, após validação, disponibiliza para os usuários finais. Além disso, oferece dados para a criação de dashboards, permitindo uma melhor compreensão do comportamento dos usuários finais.'
servers:
  - url: 'http://localhost:7000'
paths:
  /api/v1/request-tags:
    get:
      summary: Get pageable of request tags
      description: 'This endpoint returns a pageable list of request tags, with the tags that have the most requests. By default, the query returns 10 items.'
      operationId: get-api-tags-request
      parameters:
        - name: page
          in: query
          description: Page of request tags
          schema:
            type: integer
            default: 10
            example: 15
        - name: size
          in: query
          description: Quantity elements per page
          schema:
            type: integer
            default: 1
            example: 1
        - name: sort
          in: query
          description: 'Sorted by '
          schema:
            type: string
            default: 'request, asc'
            example: 'requestAt, asc'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/RequestTag'
                  pageable:
                    type: object
                    properties:
                      page_number:
                        type: integer
                      page_size:
                        type: integer
                      sort:
                        type: object
                        properties:
                          sorted:
                            type: boolean
                          empty:
                            type: boolean
                          unsorted:
                            type: boolean
                      offset:
                        type: integer
                      paged:
                        type: boolean
                      unpaged:
                        type: boolean
                  last:
                    type: boolean
                  total_elements:
                    type: integer
                  total_pages:
                    type: integer
                  first:
                    type: boolean
                  size:
                    type: integer
                  number:
                    type: integer
                  sort:
                    type: object
                    properties:
                      sorted:
                        type: boolean
                      empty:
                        type: boolean
                      unsorted:
                        type: boolean
                  number_of_elements:
                    type: integer
                  empty:
                    type: boolean
              examples:
                Example 1:
                  value:
                    content:
                      - id: '1'
                        name: REQUEST_TAG
                        email: request@example.com
                      - id: 055ae853-c257-4cd8-8f45-4ae17f7d8e2b
                        name: Jane Doe
                        email: jane.doe@example.com
                    pageable:
                      sort:
                        sorted: true
                        unsorted: false
                        empty: false
                      offset: 0
                      pageNumber: 0
                      pageSize: 2
                      paged: true
                      unpaged: false
                    totalPages: 1
                    totalElements: 2
                    last: true
                    size: 2
                    number: 0
                    sort:
                      sorted: true
                      unsorted: false
                      empty: false
                    numberOfElements: 2
                    first: true
                    empty: false
      servers:
        - url: 'http://localhost:7000'
  /api/v1/available-tags:
    get:
      summary: Get pageable of available tags
      description: 'This endpoint returns an pageable of available tags, By default, the query returns 10 items.'
      operationId: get-api-tags-available
      parameters:
        - name: page
          in: query
          description: Page of available request
          schema:
            type: string
            default: '1'
            example: '1'
        - name: size
          in: query
          description: Quantity of tags per page
          schema:
            type: string
            default: '10'
            example: '15'
        - name: sort
          in: query
          description: Sorted by
          schema:
            type: string
            default: 'request, asc'
            example: 'requestAt, asc'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/AvailableTag'
                  pageable:
                    type: object
                    properties:
                      page_number:
                        type: integer
                      page_size:
                        type: integer
                      sort:
                        type: object
                        properties:
                          sorted:
                            type: boolean
                          empty:
                            type: boolean
                          unsorted:
                            type: boolean
                      offset:
                        type: integer
                      paged:
                        type: boolean
                      unpaged:
                        type: boolean
                  last:
                    type: boolean
                  total_elements:
                    type: integer
                  total_pages:
                    type: integer
                  first:
                    type: boolean
                  size:
                    type: integer
                  number:
                    type: integer
                  sort:
                    type: object
                    properties:
                      sorted:
                        type: boolean
                      empty:
                        type: boolean
                      unsorted:
                        type: boolean
                  number_of_elements:
                    type: integer
                  empty:
                    type: boolean
      servers:
        - url: 'http://localhost:7000'
components:
  schemas:
    RequestTag:
      type: object
      title: RequestTag
      properties:
        id:
          type: string
        name:
          type: string
        requests:
          type: integer
        requestAt:
          type: string
          format: date-time
    AvailableTag:
      type: object
      title: AvailableTag
      properties:
        id:
          type: string
        name:
          type: string
        status:
          type: string
          enum:
            - test
            - test1
        createAt:
          type: string
          format: date-time
    ErrorResponse:
      title: ErrorResponse
      type: object
      properties:
        type:
          type: string
        message:
          type: string
        details:
          type: object
      required:
        - type
        - message
        - details